#+TITLE: Personal Emacs Configuration
#+AUTHOR: Lorenzo Cabrini
#+CATEGORY: emacs.d
#+PROPERTY: header-args :results silent :tangle "~/.config/emacs/init.el"
#+AUTO_TANGLE: t
#+OPTIONS: toc:3


* Introduction
This is my personal Emacs configuration.

On Jan. 1, 2023 I decided to delete my Emacs configuration file and to start all over. The old configuration had become a mess. I wanted to start afresh.
* Bootstrap
** Init File Header
There is an Emacs convention to add a special comment header to Lisp libraries (read about it [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][here]]), so I do that here.

#+begin_src emacs-lisp
  ;;; init.el --- Emacs configuration -*- lexical-binding: t -*-

  ;;; Copyright (C) 2023 Lorenzo Cabrini

  ;;; Author: Lorenzo Cabrini <lorenzo.cabrini@gmail>
  ;;; Keywords: configuration
  ;;; URL: https://gitlab.com/lorenzocabrini/emacs.d

  ;;; Commentary:

  ;;; Code:
#+end_src

** Early Init
Emacs will read the contents of ~early-init.el~ if it is present. This happens before the package system
and the GUI are initialized, so it it a place to do early initialization stuff.

The following block of code gets tangled into ~~.config/emacs/early-init.el~.

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
  ;;; early-init.el --- Early initialization -*- lexical-binding: t -*-

  ;;; Copyright (C) 2023 Lorenzo Cabrini

  ;;; Author: Lorenzo Cabrini <lorenzo.cabrini@gmail>
  ;;; Keywords: configuration
  ;;; URL: https://gitlab.com/lorenzocabrini/emacs.d

  ;;; Commentary:

  ;;; Code:

  ;; Inhibit package.el loading packages prior to init.el loading
  (setq package-enable-at-startup nil)

  ;; Disable some GUI elements early so that they don't briefly show up when Emacs
  ;; first fires up
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Disable GUI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  (setq comp-deferred-compilation nil)
  ;;; early-init.el ends here
#+end_src

* Package Management
** Straight
 [[https://github.com/radian-software/straight.el][straight.el]] is a package manager. The following block of code, taken from the ~straight.el~ README, sets it up.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Make sure that ~straight.el~ is used as the default package manager.

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src

*** Integration with ~use-package~
A popular macro for package installation and configuration is [[https://github.com/jwiegley/use-package][use-package]].  The following makes use-package use ~straight.el~ for package management.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

* General Settings
** Help
*** Which Key
The [[https://github.com/justbur/emacs-which-key][which-key]] utility shows possible completions of commands in the miniguffer.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

*** Discover
[[https://github.com/mickeynp/discover.el][Discover]] provides help via context menus.

#+begin_src emacs-lisp
  (use-package discover)
#+end_src

** Shell Path
The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package imports the shell environment into emacs.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src

** Version Control
*** Magit
[[https://magit.vc/][Magit]] is an interface to [[https://git-scm.com/][Git]].

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Terminal Emulation
*** Vterm
I use [[https://github.com/akermu/emacs-libvterm][vterm]] as my default terminal in Emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :config
    (defun lorcab/vterm ()
      (interactive)
      (vterm t))
    :bind ("<s-return>" . lorcab/vterm))
#+end_src

** Windows, Buffers and Workspaces
*** Bufler
 [[https://github.com/alphapapa/bufler.el][Bufler]] allows you to group buffers into workspaces. 

#+begin_src emacs-lisp
  (use-package bufler
    :bind
    ("C-x x b" . bufler-switch-buffer)
    ("C-x x s" . bufler-workspace-frame-set)
    :config (bufler-mode))
#+end_src

*** Burly
[[https://github.com/alphapapa/burly.el][Burly]] allows you to save and restore frame and window configurations.

#+begin_src emacs-lisp
  (use-package burly)
#+end_src

*** Ace Window
[[https://github.com/abo-abo/ace-window][ace-window]] allows me to easily switch between windows in Emacs

#+begin_src emacs-lisp
  (use-package ace-window
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+end_src

** Authentication
I want all my passwords encrypted.

#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+end_src

** Customization
Store any customizations into ~custom.el~.

#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/custom.el")
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

* Org Mode
** Basic Org Configuration
I use [[https://orgmode.org/][org-mode]] extensively. Set it up with a few reasonable defaults.

#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :init (setq org-startup-indented t
                org-startup-folded t
                org-hide-emphasis-markers t
                org-hide-leading-stars t))
#+end_src

I'm trying out a non-proportional font in ~org-mode~. I also enable word wrap.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

** UI Customization
I customize a few elements. Althought I'm using a non-proportional font in org-mode, I don't want that to apply to code blocks. Also, there are some ~org-mode~ elements I find difficult to read, so I customize them.

#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (fixed-pitch)))))
   '(org-document-info-keyword ((t (:inherit (fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-tag ((t (:inherit (fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (fixed-pitch)))))
   '(org-date ((t (:inherit (fixed-pitch)))))
   '(org-hide ((t (:foreground "white")))))  
#+end_src

*** TODO get org-hide to work properly in emacsclient
** Org Capture
For now, I only have a capture template to capture into my inbox.

#+begin_src emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/org/gtd/inbox.org" "Inbox")
                                 "* TODO %i%?")))
#+end_src

Set up keybinding for org-capture.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c c") 'org-capture)
#+end_src

** Org Refile
I set up my refiling targets here, along with a few settings.

#+begin_src emacs-lisp
  (setq org-outline-path-complete-in-steps nil
        org-refile-use-outline-path 'file
        org-refile-targets '(("~/org/gtd/projects.org" :level . 1)
                             ("~/org/gtd/tasks.org" :level . 1)
                             ("~/org/gtd/amadaa.org" :level . 1)
                             ("~/org/gtd/someday.org" :level . 1)
                             ("~/org/gtd/archive.org" :level . 1)))
#+end_src

** Org Log
Set up the activities that should be logged.

#+begin_src emacs-lisp
  (setq org-log-into-drawer t
        org-log-refile 'note)
#+end_src

** Org Todo
The following are the keywords that I use for tasks.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "NEXT(n!)"
                    "WAITING(w@/!)"
                    "|"
                    "DONE(d!)"
                    "CANCELED(c@)")))
#+end_src

** Org Agenda
The agenda reports on tasks and their states. It needs to know in which files it should look for tasks. I want it to look in a few files in ~~/org/gtd/~. In addition, it should look in any file named ~README.org~ in any directory under ~~/git~.

#+begin_src emacs-lisp
  (defun lorcab/readme-in-dir-p (p)
    (let ((fp (expand-file-name "README.org" p)))
      (if (file-exists-p fp)
          fp)))

  (setq org-agenda-files
        (append
         '("~/org/gtd/projects.org" "~/org/gtd/habits.org")
         (flatten-tree
          (mapcar #'lorcab/readme-in-dir-p
                  (directory-files
                   "~/git"
                   t
                   directory-files-no-dot-files-regexp)))))
#+end_src

** Org Tags
Since i'm using a non-proportional fonts in org-mode, tags don't align well and it looks ugly. 

#+begin_src emacs-lisp
  (setq org-tags-column 0)
#+end_src

** Org Roam
[[https://www.orgroam.com/][Org-roam]] is an extension to ~org-mode~ that implments a personal knowledge management system.

#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/roam")
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src

*** Org Roam UI
[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] provide visualization of the ~org-roam~ database.

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight (:host github
                     :repo "org-roam/org-roam-ui"
                     :branch "main"
                     :files ("*.el" "out"))
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Org Present
[[https://github.com/rlister/org-present][org-present-mode]] is a simple presentation mode for org-mode files.

#+begin_src emacs-lisp
  (use-package org-present)
#+end_src

** Org Modern
I'm trying out [[https://github.com/minad/org-modern][org-modern]], which gives a "modern" style to ~org-mode~.

#+begin_src emacs-lisp
  (use-package org-modern
    :custom
    (org-modern-table nil)
    (org-modern-timestamp nil)
    (org-modern-priority nil)
    :config
    (global-org-modern-mode))
#+end_src

** Org Auto Tangle
[[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] is used to automatically tangle org files on save.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook org-mode)
#+end_src

* Text
** Coding System
Use UTF-8. I'm not sure all these are needed, but I'll play it safe for now and remove the ones that are not needed.
#+begin_src emacs-lisp
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+end_src

** Fonts
I really like the [[https://git.sr.ht/~protesilaos/iosevka-comfy][Iosekva Comfy]] font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Iosevka Comfy" :height 105)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka Comfy" :height 105)
  (set-face-attribute 'variable-pitch nil :family "Iosevka Comfy Duo" :height 105)
#+end_src

I also set up some CJK fonts. I'm currently only using Japanese but plan to learn Hangul at some point.

#+begin_src emacs-lisp
  (set-fontset-font t 'han "Noto Sans CJK SC Regular")
  (set-fontset-font t 'kana "Noto Sans CJK JP Regular")
  (set-fontset-font t 'hangul "Noto Sans CJK KR Regular")
  (set-fontset-font t 'cjk-misc "Noto Sans CJK KR Regular")
#+end_src

*** TODO the CJK font setup doesn't work. Need to figure out why
** Whitespace
[[https://github.com/lewang/ws-butler][ws-butler]] trims whitespaces from the end of lines.

#+begin_src emacs-lisp
  (use-package ws-butler
    :init
    (ws-butler-global-mode t))
#+end_src

** Completion
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode))
#+end_src

*** Marginalia
The [[https://github.com/minad/marginalia][Marginalia]] package provides marginalia to minibuffer completions.

#+begin_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

*** Orderless
The [[https://github.com/oantolin/orderless][orderless]] package gives an orderless completion style.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides
          '((file (styles partial-completion)))))

#+end_src

*** Corfu
[[https://github.com/minad/corfu][Corfu]] provides a completion popup for completion at point.

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-separator ?\s)
    :init
    (global-corfu-mode))
#+end_src

*** Consult
[[https://github.com/minad/consult][Consult]] provides search and navigation commands. I'm currently getting familiar with it, so
this configuration is going to change over time.

#+begin_src emacs-lisp
  (use-package consult
    :bind
    ("M-s l" . consult-line)
    ("M-s L" . consult-line-multi))
#+end_src

** Ledger Mode
[[https://www.ledger-cli.org/][Ledger]] is a powerful personal accounting system for the command-line. Of course, there is a [[https://www.ledger-cli.org/3.0/doc/ledger-mode.html][ledger-mode]] for Emacs as well.

#+begin_src emacs-lisp
  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transactions 1)
    :mode "\\.ledger\\'")
#+end_src

** Systemd Mode
I frequently edit systemd unit files, so [[https://github.com/holomorph/systemd-mode][systemd-mode]] is handy.

#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

** Snippets
[[https://github.com/joaotavora/yasnippet][Yasnippet]] provides snippets from Emacs.

 #+begin_src emacs-lisp
   (use-package yasnippet
     :config
     (yas-global-mode 1))
 #+end_src

** Visual Fill Column
[[https://codeberg.org/joostkremers/visual-fill-column][visual-fill-column]] mimics the effect of ~fill-column~ in visual-line-mode.

#+begin_src emacs-lisp
  (use-package visual-fill-column)
#+end_src

** Rainbow identifiers
[[https://github.com/Fanael/rainbow-identifiers][Rainbow Identifiers]] mode is a minor mode providing highlighting of identifiers based on their name.

#+begin_src emacs-lisp
  (use-package rainbow-identifiers)
#+end_src

* UI
** General
*** Hightlight current line
Highlight the current line in programming and text modes.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

*** Tab bar
Of late, I've really warmed to the tab bar.

#+begin_src emacs-lisp
  (tab-bar-mode 1)
#+end_src
** All the Icons
The [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package is a utility package to install some icon fonts and use them within Emacs.

To install the actual fonts do:

#+begin_example
  M-x all-the-icons-install-fonts
#+end_example

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

The following package adds icon support to dired-mode.

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook
    (dired-mode . all-the-icons-dired-mode))
#+end_src

** Dashboard
Currently, I use [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] as my start-up buffer.

#+begin_src emacs-lisp
  (use-package dashboard
    :demand
    :config
    (dashboard-setup-startup-hook))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-startup-banner 'official)
  (setq dashboard-center-content nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (agenda . 5)))

  (setq dashboard-navigator-buttons
        `(
          ((,(all-the-icons-octicon "home" :height 1.1 :v-adjust 0.0)
            "Index"
            "Open index.org"
            (lambda (&rest _) (find-file "~/org/index.org")))
           (,(all-the-icons-faicon "gitlab" :height 1.1 :v-adjust 0.0)
            "GitLab"
            "Open GitLab"
            (lambda (&rest _) (browse-url "https://gitlab.com")))
           (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0)
            "Config"
            "Emacs config"
            (lambda (&rest _) (find-file "~/git/emacs.d/README.org")))
           )))
#+end_src

** Theme
*** Ef Themes
I really like  [[https://github.com/protesilaos/ef-themes][ef-themes]].

#+begin_src emacs-lisp
  (use-package ef-themes
    :init
    :config
    (ef-themes-select 'ef-frost))
#+end_src

** Modeline
I use [[https://github.com/seagle0128/doom-modeline][doom-modeline]] as my modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-icon t)
    (setq doom-modeline-buffer-file-name-style 'file-name)
    (column-number-mode t)
    :custom
    (display-battery-mode t))
#+end_src

Display the time on the modeline.

#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
  (setq display-time-24hr-format t)
  (display-time-mode t)
#+end_src

** Emoji
The [[https://github.com/iqbalansari/emacs-emojify][emojify]] package is used to display emojis.

#+begin_src emacs-lisp
  (use-package emojify
    :init (setq emojify-display-style 'unicode
                emojify-emoji-styles '(unicode))
    :hook (after-init . global-emojify-mode))
#+end_src

* Programming
** Project Management
*** Projectile
I use [[https://github.com/bbatsov/projectile][Projectile]] for project managment.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+end_src

*** Forge
[[https://github.com/magit/forge][Forge]] is used to connect to Git forges (GitLab, GitHub, etc).

#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src

** Eglot
[[https://github.com/joaotavora/eglot][Eglot]] is a client for the Language Server Protocol (LSP).

#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :config
    (setq read-process-output-max (* 1024 1024)))
#+end_src

** Scheme
[[https://github.com/emacsmirror/geiser][Geiser]] allows Emacs to connect to various Scheme REPLs. I use Guile Scheme.

#+begin_src emacs-lisp
  (use-package geiser-guile
    :ensure t)
#+end_src

** Go
[[https://github.com/dominikh/go-mode.el][go-mode]] provides a major mode for Go. I use it with Eglot. This requires installing ~gopls~, which is done with:

#+begin_example
  $ go install golang.org/x/tools/gopls@latest
#+end_example

I couldn't get Eglot to automatically organize imports, so for now I'm letting ~goimports~ handle that. It is installed with:

#+begin_example
  $ go install golang.org/x/tools/cmd/goimports@latest
#+end_example

#+begin_src emacs-lisp
  (setq gofmt-command "goimports")
  
  (use-package go-mode
    :config
    (add-hook 'go-mode-hook 'eglot-ensure)
    (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src

** JavaScript
I'm using the built-in js-mode, together with Eglot. Eglot requires the TypeScript language server to be installed with:

#+begin_example
  $ sudo npm install -g typescript-language-server typescript
#+end_example

#+begin_src emacs-lisp
  (add-hook 'js-mode-hook 'eglot-ensure)
#+end_src

** JSON
[[https://github.com/joshwnj/json-mode][json-mode]] provides a major mode for working with JSON files. I use it with Eglot, without really knowing what the benefits are. I guess I'll figure it out eventually.

Eglot requires a language server called ~vscode-langservers-extracted~. It also needs the typescript language server. The following two commands install both of those.

#+begin_example
  $ sudo npm i -g vscode-langservers-extracted
  $ sudo npm install -g typescript-language-server typescript
#+end_example

#+begin_src emacs-lisp
  (use-package json-mode
    :config
    (add-hook 'json-mode-hook 'eglot-ensure))
#+end_src

I frequently have to deal with fairly large, compacted JSON files. This tends to slow Emacs down. The following runs the file through ~jq~ before insert into the buffer.

#+begin_src emacs-lisp
  (defun lorcab/pretty-print-json-file ()
    (when buffer-file-name
      (message "we have a file name")
      (when (string-match "\\.json\\'" buffer-file-name)
            (message "we have a JSON file")
            (shell-command-on-region (point-min) (point-max) "jq" t t))))

  (add-hook 'find-file-hook 'lorcab/pretty-print-json-file)
#+end_src

*** TODO check if the JSON file has long lines before piping through jq
** REST Client
[[https://github.com/pashky/restclient.el][restclient.el]] is a REST client for Emacs.

#+begin_src emacs-lisp
  (use-package restclient)
#+end_src

Associate the ~.rest~ extension with restclient-mode.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.rest\\'" . restclient-mode))
#+end_src

* Communication
** Mail
*** Email Address
Set these, since mu4e uses them.

#+begin_src emacs-lisp
  (setq user-full-name "Lorenzo Cabrini"
        user-mail-address "lorenzo.cabrini@gmail.com")
#+end_src

*** IMAP
I use [[https://github.com/djcb/mu][mu4e]] to read mails in Emacs.

#+begin_src emacs-lisp
  (use-package mu4e
    :config
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/mail/gmail")

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder "/[Gmail]/Sent")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder "/[Gmail]/Trash")

    (setq mu4e-maildir-shortcuts
          '(("/Inbox" . ?i)
            ("/[Gmail]/Sent Mail" . ?s)
            ("/[Gmail]/Trash" . ?t)
            ("/[Gmail]/All Mail" . ?a))))
#+end_src

*** SMTP
#+begin_src emacs-lisp
  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "lorenzo.cabrini@gmail.com" nil)))
#+end_src

** Mastodon
#+begin_src emacs-lisp
  (use-package mastodon
    :config
    (mastodon-discover))

  (setq mastodon-instance-url "https://emacs.ch"
        mastodon-active-user "lorenzocabrini")
#+end_src

** IRC
Emacs comes with a built-in IRC client called ERC.

#+begin_src emacs-lisp
  (require 'erc)
  (setq erc-autojoin-channels-alist '(("libera.chat"
                                      "#emacs" "#org-mode"
                                      "#archlinux" "#gentoo" "#bash"
                                      "#guile"
                                      )))
  (setq erc-default-server "irc.libera.chat")
  (setq erc-nick "lorcab")
  (setq erc-prompt-for-nickserv-password nil)
  (setq erc-autojoin-timing 'ident)
  (require 'erc-services)
  (erc-services-mode 1)
#+end_src

** Matrix
[[https://github.com/alphapapa/ement.el][Ement.el]] is a Matrix client for Emacs.

#+begin_src emacs-lisp
  (use-package ement)
#+end_src

** Telegram
[[https://github.com/zevlg/telega.el][telega.el]] is a Telegram client for Emacs. It requires [[https://github.com/tdlib/td][TDLib]] to be installed and it can be really picky with the version. I had to try a few combinations before I got it to work.

#+begin_src emacs-lisp
  (use-package telega
    :defer t
    :straight (telega
               :type git
               :host github
               :repo "zevlg/telega.el"
               :branch "release-0.8.0")
    :commands (telega)
    :init (setq telega-server-libs-prefix "/usr"))
#+end_src

* News & Feeds
** Elfeed
I use [[https://github.com/skeeto/elfeed][elfeed]] for subscribing to RSS feeds.

#+begin_src emacs-lisp
  (use-package elfeed)

  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

I use a nifty little utility called [[https://github.com/remyhonig/elfeed-org][elfeed-org]] to manage my feeds in an org-mode file.

#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :init
    (elfeed-org))

  (setq rmh-elfeed-org-files (list "~/org/feeds.org"))
#+end_src

** Elfeed Tube
[[https://github.com/karthink/elfeed-tube][Elfeed Tube]] is an extension to elfeed which adds improved YouTube integration.

#+begin_src emacs-lisp
  (use-package elfeed-tube
    :after elfeed
    :demand t
    :config
    (elfeed-tube-setup)
    :bind (:map elfeed-show-mode-map
                ("F" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)
                :map elfeed-search-mode-map
                ("F" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)))
#+end_src

elfeed-tube-mpv gives better MPV support

#+begin_src emacs-lisp
  (use-package elfeed-tube-mpv
    :bind (:map elfeed-show-mode-map
                ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                ("C-c C-w" . elfeed-tube-mpv-where)))
#+end_src

* Multimedia
** EMMS
I use [[https://www.gnu.org/software/emms/][EMMS]] for playing audio in Emacs. I haven't spent much time configuring it, however.

#+begin_src emacs-lisp
  (use-package emms
    :config
    (progn
      (emms-standard)
      (emms-default-players)
      (setq emms-playlist-buffer-name "EMMS"
            emms-source-file-default-directory "~/music/")))
#+end_src

Org-mode integration is done with [[https://github.com/jagrg/org-emms][org-emms]].

#+begin_src emacs-lisp
  (use-package org-emms)
#+end_src

** MPV
[[https://github.com/kljohann/mpv.el][mpv.el]] is used to control mpv from within Emacs.

#+begin_src emacs-lisp
  (use-package mpv)
#+end_src

** PipeWire
The [[https://git.zamazal.org/pdm/pipewire-0][pipewire-0]] package provides support for PipeWire.

#+begin_src emacs-lisp
  (use-package pipewire
    :straight (pipewire-0
               :type git
               :repo "https://git.zamazal.org/pdm/pipewire-0"
               :local-repo "pipewire-0"))
#+end_src

Set some keybindings for controlling audio.

#+begin_src emacs-lisp
  (global-set-key (kbd "<XF86AudioMute>") 'pipewire-toggle-muted)
  (global-set-key (kbd "<XF86AudioLowerVolume>") 'pipewire-decrease-volume)
  (global-set-key (kbd "<XF86AudioRaiseVolume>") 'pipewire-increase-volume)
#+end_src

*** TODO only enable pipewire-0 if the commands ~pw-cli~ and ~pw-metadata~ are installed
* Networking
** NetworkManager
[[https://github.com/Kodkollektivet/emacs-nm][emacs-nm]] allows you to interact with NetworkManager from Emacs.

#+begin_src emacs-lisp
  (use-package nm
    :straight (nm-emacs
               :type git
               :host github
               :repo "Kodkollektivet/emacs-nm"))
#+end_src

*** TODO only activate emacs-nm if NetworkManager is installed on the host system
* Education
** Spaced Repetition
[[https://www.leonrische.me/fc/index.html][org-fc]] is a spaced repetition system for Emacs.

#+begin_src emacs-lisp
  (use-package org-fc
    :straight (org-fc
               :type git :repo "https://git.sr.ht/~l3kn/org-fc"
               :files (:defaults "awk" "demo.org"))
    :custom
    (org-fc-directories '("~/fc/lang/gaa"
                          "~/fc/lang/jpn"))
    (org-fc-review-history-file "~/fc/org-fc-reviews.tsv")
			       
    :config
    (require 'org-fc-audio)
    (require 'org-fc-keymap-hint)
    (require 'org-fc-hydra)
    (global-set-key (kbd "C-c f") 'org-fc-hydra/body))
#+end_src

I have a simple directory structure for my flashcards. For any language /LANG/, the flashcard files are stored in ~~/fc/lang/<LANG>~ and the corresponding audio files are in ~~fc/res/au/<LANG>~. I don't want to have to navigate through directories each time I call ~org-fc-audio-set-after-setup~. The following function takes care of that.

#+begin_src emacs-lisp
  (defun lorcab/fc-audio-after-setup ()
    (interactive)
    (let ((default-directory
            (concat 
             (expand-file-name
              (file-name-nondirectory
               (directory-file-name
                (file-name-directory default-directory)))
              "~/fc/res/au/")
             "/")))
      (call-interactively 'org-fc-audio-set-after-setup)))

  (define-key org-mode-map (kbd "C-c a") (lambda ()
                                           (interactive)
                                           (lorcab/fc-audio-after-setup)))
#+end_src

Increase the text scale before review and reset it back after the review.

*Note:* resetting the text scale doesn't work very well when a review is done on more than a single org file. In such cases, only the active buffer at the end of the review gets its text scale reset. I'll have to find a way to solve that.

#+begin_src emacs-lisp
  (add-hook 'org-fc-before-setup-hook (lambda () (text-scale-set 3)))
  (add-hook 'org-fc-after-review-hook (lambda () (text-scale-set 0)))
#+end_src

*** TODO reset text scale on all org-fc buffers after review
** Kanji Mode
[[https://github.com/wsgac/kanji-mode][kanji-mode]] shows stroke order of kanji and is able to transcribe text to hiragana or romaji.

#+begin_src emacs-lisp
  (use-package kanji-mode)
#+end_src

* Religion
I use [[https://github.com/dtk01/dtk][dtk.el]] for Bible study. It's an Emacs front-end to ~diatheke~, which needs to be installed. Also, one or more texts need to be installed.

#+begin_src emacs-lisp
  (use-package dtk
    :bind (("C-c B" . dtk-bible))
    :custom
    (dtk-module "CPDV")
    (dtk-module-category "Biblical Texts")
    (dtk-word-wrap t))
#+end_src

* Fun Stuff
** Sudoku
 With [[https://github.com/zevlg/sudoku.el][sudoku.el]] you can play sudoku in Emacs.
#+begin_src emacs-lisp
  (use-package sudoku)
#+end_src

* To Do
** TODO evaluate ejira
[[https://github.com/nyyManni/ejira][GitHub]]
** TODO evaluate org-jira
[[https://github.com/ahungry/org-jira][GitHub]]
* References
